AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  SSMNamespace:
    Type: String
    Default: /openbrighton/main
    Description: SSM namespace prefix for API Gateway parameters

  ApiGatewayId:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /openbrighton/main/api-gateway/id
    Description: SSM path of the api gateway id

  LambdaS3Bucket:
    Type: String
    Description: S3 bucket containing the Lambda deployment package

  LambdaS3Key:
    Type: String
    Default: bootstrap
    Description: S3 key for the Lambda deployment package

  StageName:
    Type: String
    Default: v1
    Description: API Gateway stage name

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: LambdaCloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
                
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}"
      Handler: main.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: !Ref LambdaS3Key
      Runtime: provided.al2023
      Timeout: 30
      MemorySize: 256

  LambdaIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGatewayId
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      PayloadFormatVersion: '2.0'
      IntegrationUri: !Sub >-
        arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations

  GraphqlPostRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGatewayId
      RouteKey: 'POST /test'
      Target: !Join [ '/', [ 'integrations', !Ref LambdaIntegration ] ]

  GraphqlGetRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGatewayId
      RouteKey: 'GET /test'
      Target: !Join [ '/', [ 'integrations', !Ref LambdaIntegration ] ]

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com

  LambdaScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(15 minutes)
      State: ENABLED
      Targets:
        - Arn: !GetAtt LambdaFunction.Arn
          Id: LambdaFunctionTarget

  LambdaInvokePermissionForEvents:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt LambdaScheduleRule.Arn